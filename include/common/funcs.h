#ifndef __DEER_COMMON_FUNCS_HEADER__
#define __DEER_COMMON_FUNCS_HEADER__

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "common/struct.h"
#include "common/print.h"

////////////////////////////////////////////////////////////////////////////////
// public
////////////////////////////////////////////////////////////////////////////////
void invalid_call(const char *state);
void invalid_node(const DeerNode *n);
void invalid_token(const DeerToken *t);
void invalid_instuction(const int line);

////////////////////////////////////////////////////////////////////////////////
// io
////////////////////////////////////////////////////////////////////////////////
int file_read_content(const char *file_path, char **str);
int file_write_content(const DeerLinkedList *codes, const char *asm_file);

////////////////////////////////////////////////////////////////////////////////
// DeerToken
////////////////////////////////////////////////////////////////////////////////
DeerToken *create_token(const char *str, int type);
void token_push_char(DeerToken *t, char ch);

////////////////////////////////////////////////////////////////////////////////
// SymbolTable
////////////////////////////////////////////////////////////////////////////////
SymbolTable *create_symbol_table();

SymbolSpace *create_symbol_space(const char *s);
const SymbolSpace *find_symbol_space(const SymbolTable *t, const char *s);

Symbol *create_symbol(const char *var_name, int var_idx, int var_size);
const Symbol *find_symbol(const SymbolTable *t, const char *s, const char *i);
const Symbol *find_symbol_global(const SymbolTable *table, const char *id);

Code *create_code(Instruction ins, char *offset);

////////////////////////////////////////////////////////////////////////////////
// code_segment
////////////////////////////////////////////////////////////////////////////////
code_segment *create_code_segment();
void code_segment_push(code_segment *cs, Instruction ins, int offset);

////////////////////////////////////////////////////////////////////////////////
// CodeMap
////////////////////////////////////////////////////////////////////////////////
CodeMap *create_code_map(const char *name, DeerLinkedList *codes);
CodeMap *find_code_map(DeerLinkedList *maps, const char *name);

////////////////////////////////////////////////////////////////////////////////
// func_jump_map
////////////////////////////////////////////////////////////////////////////////
FuncJump *create_func_jump(char *name, int start);
FuncJump *find_func_jump(DeerLinkedList *jumps, const char *name);

////////////////////////////////////////////////////////////////////////////////
// virtual machine
////////////////////////////////////////////////////////////////////////////////
virtual_machine *create_virtual_machine();
vm_stack *create_vm_stack();
int vm_stack_pop(vm_stack *vm);
int vm_stack_back(const vm_stack *vm);
int vm_stack_size(const vm_stack *vm);
int vm_stack_get(const vm_stack *vm, const int index);
void vm_stack_push(vm_stack *vm, const int value);
void vm_stack_set(vm_stack *vm, const int index, const int value);

#endif      // __DEER_COMMON_FUNCS_HEADER__